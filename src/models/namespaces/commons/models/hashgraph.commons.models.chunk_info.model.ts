import { ApiProperty } from "@hsuite/nestjs-swagger"
import { IHashgraph } from '../../../../interfaces/hashgraph.namespace';

/**
 * Class representing chunk information for a transaction
 * @class _ChunkInfo
 * @implements {IHashgraph.ICommons.IChunkInfo}
 * @namespace Hashgraph.Commons.ChunkInfo
 * @description Provides information about a chunk in a multi-chunk transaction.
 * Used for handling large transactions that need to be split into multiple parts.
 * @category Hashgraph
 * @subcategory Commons
 * @since 2.0.0
 * 
 * @property {IHashgraph.IRestful.ITransactions.ITransaction.IId} [initial_transaction_id] - The initial transaction ID
 * @property {number} [number] - The number of the current chunk
 * @property {number} [total] - The total number of chunks
 * @property {number} [nonce] - A client-generated number to ensure transaction uniqueness
 * @property {boolean} [scheduled] - Indicates if the transaction is scheduled
 * 
 * @example
 * const chunkInfo = new _ChunkInfo(
 *   { transaction_id: "0.0.1@1234567890.000000000" },
 *   2,
 *   5,
 *   3,
 *   true
 * );
 */
export class _ChunkInfo implements IHashgraph.ICommons.IChunkInfo {
    /**
     * The initial transaction ID for the multi-chunk transaction
     * @type {IHashgraph.IRestful.ITransactions.ITransaction.IId}
     * @description Unique identifier of the first transaction in a multi-chunk sequence
     * @memberof _ChunkInfo
     * @public
     * @since 2.0.0
     * @optional
     * 
     * @example
     * chunkInfo.initial_transaction_id = { transaction_id: "0.0.1@1234567890.000000000" };
     */
    @ApiProperty({
        description: "The initial transaction ID for the multi-chunk transaction",
        type: () => Object,
        required: false,
        example: { "transaction_id": "0.0.1@1234567890.000000000" }
    })
    initial_transaction_id?: IHashgraph.IRestful.ITransactions.ITransaction.IId

    /**
     * The number of the current chunk
     * @type {number}
     * @description Sequential number identifying this chunk's position in the sequence
     * @memberof _ChunkInfo
     * @public
     * @since 2.0.0
     * @optional
     * 
     * @example
     * chunkInfo.number = 2;
     */
    @ApiProperty({
        description: "The number of the current chunk",
        type: () => Number,
        required: false,
        minimum: 1,
        example: 2
    })
    number?: number

    /**
     * The total number of chunks in the transaction
     * @type {number}
     * @description Total number of chunks the transaction is split into
     * @memberof _ChunkInfo
     * @public
     * @since 2.0.0
     * @optional
     * 
     * @example
     * chunkInfo.total = 5;
     */
    @ApiProperty({
        description: "The total number of chunks in the transaction",
        type: () => Number,
        required: false,
        minimum: 1,
        example: 5
    })
    total?: number

    /**
     * A client-generated number to ensure transaction uniqueness
     * @type {number}
     * @description Random number generated by the client to prevent duplicate transactions
     * @memberof _ChunkInfo
     * @public
     * @since 2.0.0
     * @optional
     * 
     * @example
     * chunkInfo.nonce = 3;
     */
    @ApiProperty({
        description: "A client-generated number to ensure transaction uniqueness",
        type: () => Number,
        required: false,
        example: 3
    })
    nonce?: number

    /**
     * Indicates if the transaction is scheduled
     * @type {boolean}
     * @description Flag indicating whether this is a scheduled transaction
     * @memberof _ChunkInfo
     * @public
     * @since 2.0.0
     * @optional
     * 
     * @example
     * chunkInfo.scheduled = true;
     */
    @ApiProperty({
        description: "Indicates if the transaction is scheduled",
        type: () => Boolean,
        required: false,
        example: true
    })
    scheduled?: boolean

    /**
     * Creates an instance of _ChunkInfo.
     * @constructor
     * @param {IHashgraph.IRestful.ITransactions.ITransaction.IId} [initial_transaction_id] - The initial transaction ID
     * @param {number} [number] - The number of the current chunk
     * @param {number} [total] - The total number of chunks
     * @param {number} [nonce] - A client-generated number to ensure transaction uniqueness
     * @param {boolean} [scheduled] - Indicates if the transaction is scheduled
     * @throws {Error} Will throw an error if initial_transaction_id is not an object
     * @throws {Error} Will throw an error if number is not a positive integer
     * @throws {Error} Will throw an error if total is not a positive integer
     * @throws {Error} Will throw an error if nonce is not an integer
     * @throws {Error} Will throw an error if scheduled is not a boolean
     * @memberof _ChunkInfo
     * @public
     * @since 2.0.0
     * 
     * @example
     * const chunkInfo = new _ChunkInfo(
     *   { transaction_id: "0.0.1@1234567890.000000000" },
     *   2,
     *   5,
     *   3,
     *   true
     * );
     */
    constructor(
        initial_transaction_id?: IHashgraph.IRestful.ITransactions.ITransaction.IId,
        number?: number,
        total?: number,
        nonce?: number,
        scheduled?: boolean
    ) {
        // Validate initial_transaction_id parameter
        if (initial_transaction_id !== undefined && typeof initial_transaction_id !== 'object') {
            throw new Error('Invalid initial_transaction_id: must be an object')
        }
        this.initial_transaction_id = initial_transaction_id

        // Validate number parameter
        if (number !== undefined && (!Number.isInteger(number) || number < 1)) {
            throw new Error('Invalid number: must be a positive integer')
        }
        this.number = number

        // Validate total parameter
        if (total !== undefined && (!Number.isInteger(total) || total < 1)) {
            throw new Error('Invalid total: must be a positive integer')
        }
        this.total = total

        if (nonce !== undefined && (!Number.isInteger(nonce))) {
            throw new Error('Invalid nonce: must be an integer')
        }
        this.nonce = nonce

        if (scheduled !== undefined && typeof scheduled !== 'boolean') {
            throw new Error('Invalid scheduled: must be a boolean')
        }
        this.scheduled = scheduled
    }
}