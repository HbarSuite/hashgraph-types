import { ApiProperty } from '@hsuite/nestjs-swagger';
import { IsArray, IsOptional, ValidateNested } from 'class-validator';
import { Type } from 'class-transformer';
import { _Entity } from './hashgraph.restful.transactions.schedule.models.entity.model';
import { IHashgraph } from '../../../../../../../../interfaces/hashgraph.namespace';
import { _Links } from '../../../../../models/hashgraph.restful.models.links.model';

/**
 * @file hashgraph.restful.transactions.schedule.models.response.model.ts
 * @class _Response
 * @description Standardized response model for schedule-related queries in the Hedera network.
 * Implements IHashgraph.IRestful.ITransactions.ISchedule.IResponse to provide
 * a consistent structure for returning schedule information with pagination
 * support. Features include:
 * - Collection of schedule entities
 * - HATEOAS-compliant pagination
 * - Automatic data transformation
 * - Type-safe response handling
 * 
 * @implements {IHashgraph.IRestful.ITransactions.ISchedule.IResponse}
 * @category Hashgraph
 * @subcategory Restful Models
 * @since 2.0.0
 * 
 * @example
 * ```typescript
 * // Create a paginated schedule response
 * const response = new _Response({
 *   schedules: [{
 *     schedule_id: "0.0.123456",
 *     creator_account_id: "0.0.789012",
 *     payer_account_id: "0.0.789012",
 *     admin_key: {
 *       key: "302a300506032b6570032100e0c8ec2758a5879ffac226a13c0c516b799e72e35141a0dd828f94d37988a4b7"
 *     },
 *     expiration_time: "1234567890.123456789",
 *     wait_for_expiry: false,
 *     executed_timestamp: null,
 *     deleted: false,
 *     memo: "Multi-signature token transfer",
 *     transaction_body: JSON.stringify({
 *       transactionID: {
 *         accountID: { shardNum: 0, realmNum: 0, accountNum: 789012 },
 *         transactionValidStart: { seconds: 1234567890, nanos: 123456789 }
 *       },
 *       nodeAccountID: { shardNum: 0, realmNum: 0, accountNum: 3 },
 *       transactionFee: 100000000,
 *       transactionValidDuration: { seconds: 120 },
 *       cryptoTransfer: {
 *         transfers: {
 *           accountAmounts: [
 *             { accountID: { shardNum: 0, realmNum: 0, accountNum: 789012 }, amount: -1000000000 },
 *             { accountID: { shardNum: 0, realmNum: 0, accountNum: 456789 }, amount: 1000000000 }
 *           ]
 *         }
 *       }
 *     })
 *   }],
 *   links: {
 *     next: "/api/v1/schedules?limit=25&timestamp=lt:1234567890.123456789"
 *   }
 * });
 * ```
 */
export class _Response implements IHashgraph.IRestful.ITransactions.ISchedule.IResponse {
    /**
     * Schedule entities collection
     * @type {Array<_Entity>}
     * @optional
     * @remarks
     * - Contains schedule details
     * - Supports empty results
     * - Auto-validates entities
     * - Handles batch responses
     */
    @ApiProperty({
        description: 'Collection of schedule entities containing detailed transaction data',
        type: () => [_Entity],
        required: false,
        example: [{
            schedule_id: "0.0.123456",
            creator_account_id: "0.0.789012",
            payer_account_id: "0.0.789012",
            admin_key: {
                key: "302a300506032b6570032100e0c8ec2758a5879ffac226a13c0c516b799e72e35141a0dd828f94d37988a4b7"
            },
            expiration_time: "1234567890.123456789",
            wait_for_expiry: false,
            executed_timestamp: null,
            deleted: false,
            memo: "Multi-signature token transfer",
            transaction_body: JSON.stringify({
                transactionID: {
                    accountID: { shardNum: 0, realmNum: 0, accountNum: 789012 },
                    transactionValidStart: { seconds: 1234567890, nanos: 123456789 }
                },
                nodeAccountID: { shardNum: 0, realmNum: 0, accountNum: 3 },
                transactionFee: 100000000,
                transactionValidDuration: { seconds: 120 },
                cryptoTransfer: {
                    transfers: {
                        accountAmounts: [
                            { accountID: { shardNum: 0, realmNum: 0, accountNum: 789012 }, amount: -1000000000 },
                            { accountID: { shardNum: 0, realmNum: 0, accountNum: 456789 }, amount: 1000000000 }
                        ]
                    }
                }
            })
        }]
    })
    @IsOptional()
    @IsArray()
    @ValidateNested({ each: true })
    @Type(() => _Entity)
    schedules?: Array<_Entity>;

    /**
     * HATEOAS-compliant pagination links
     * @type {_Links}
     * @optional
     * @remarks
     * - Facilitates result navigation
     * - Supports RESTful standards
     * - Handles large result sets
     * - Auto-generated by API
     */
    @ApiProperty({
        description: 'HATEOAS-compliant pagination links for navigating through schedule results',
        type: () => _Links,
        required: false,
        example: {
            next: "/api/v1/schedules?limit=25&timestamp=lt:1234567890.123456789"
        }
    })
    @IsOptional()
    @ValidateNested()
    @Type(() => _Links)
    links?: _Links;

    /**
     * Creates an instance of _Response
     * @constructor
     * @param {Partial<_Response>} data - Schedule response data
     * @remarks
     * - Validates all properties
     * - Transforms nested objects
     * - Ensures data integrity
     * - Creates pagination links
     * 
     * @example
     * ```typescript
     * // Create empty response
     * const emptyResponse = new _Response({});
     * 
     * // Create response with schedules
     * const response = new _Response({
     *   schedules: [{
     *     schedule_id: "0.0.123456",
     *     creator_account_id: "0.0.789012",
     *     expiration_time: "1234567890.123456789",
     *     transaction_body: JSON.stringify({
     *       transactionID: {
     *         accountID: { shardNum: 0, realmNum: 0, accountNum: 789012 }
     *       }
     *     })
     *   }],
     *   links: {
     *     next: "/api/v1/schedules?limit=25&timestamp=lt:1234567890.123456789"
     *   }
     * });
     * ```
     */
    constructor(data?: Partial<_Response>) {
        if (data) {
            // Transform schedule entities
            this.schedules = data.schedules ? data.schedules.map(schedule => new _Entity(schedule)) : undefined;
            
            // Transform pagination links
            this.links = data.links ? new _Links(data.links.next) : undefined;
        }

        // Validate the instance
        const errors = require('class-validator').validateSync(this);
        if (errors.length > 0) {
            throw new Error(`Validation failed: ${errors.map(e => e.toString()).join(', ')}`);
        }
    }
}