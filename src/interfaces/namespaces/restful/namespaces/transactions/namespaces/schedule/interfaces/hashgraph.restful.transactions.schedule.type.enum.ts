/**
 * @file hashgraph.restful.transactions.schedule.type.enum.ts
 * @module @hashgraph/sdk
 * @description Defines the supported cryptographic signature types in the Hashgraph Network REST API.
 * This enumeration represents the various signature algorithms available for transaction signing.
 * @category Enums
 * @subcategory Transactions
 * @since 2.0.0
 */

/**
 * Signature Type Enumeration
 * @enum {string}
 * @description Represents the available cryptographic signature algorithms.
 * This enum includes:
 * - Modern elliptic curve algorithms
 * - Traditional RSA signatures
 * Used for specifying and validating signature types in transactions.
 * @category Enums
 * @subcategory Transactions
 * @public
 * 
 * @example
 * ```typescript
 * // Example of using signature types
 * const signatureTypes = {
 *   smart_contract: _TypeEnum.Contract,
 *   standard_ed25519: _TypeEnum.Ed25519,
 *   ethereum_compatible: _TypeEnum.EcdsaSecp256K1
 * };
 * 
 * // Example of signature type validation
 * const isValidSignatureType = (type: string): boolean => {
 *   return Object.values(_TypeEnum).includes(type as _TypeEnum);
 * };
 * 
 * // Example of signature type mapping
 * const getKeyPrefix = (type: _TypeEnum): string => {
 *   switch (type) {
 *     case _TypeEnum.Ed25519:
 *       return "302a300506032b6570032100";
 *     case _TypeEnum.EcdsaSecp256K1:
 *       return "3056301006072a8648ce3d020106052b8104000a034200";
 *     default:
 *       return "";
 *   }
 * };
 * ```
 */
export enum _TypeEnum {
    /**
     * Smart Contract Signature
     * @description Cryptographic signature generated by smart app execution.
     * Properties:
     * - Generated programmatically
     * - Used in contract interactions
     * - Validates contract authority
     * - Common in automated operations
     * @type {string}
     * @memberof _TypeEnum
     * @since 2.0.0
     * @example _TypeEnum.Contract
     */
    Contract = 'CONTRACT',

    /**
     * Ed25519 Signature
     * @description Edwards-curve Digital Signature Algorithm (EdDSA).
     * Properties:
     * - High security (equivalent to RSA 3072-bit)
     * - Fast signature generation
     * - Small key and signature size
     * - Widely used in cryptocurrency
     * @type {string}
     * @memberof _TypeEnum
     * @since 2.0.0
     * @example _TypeEnum.Ed25519
     */
    Ed25519 = 'ED25519',

    /**
     * RSA-3072 Signature
     * @description RSA signature with 3072-bit key length.
     * Properties:
     * - Traditional public-key cryptography
     * - NIST recommended key size
     * - Widely supported
     * - Larger signatures than ECC
     * @type {string}
     * @memberof _TypeEnum
     * @since 2.0.0
     * @example _TypeEnum.Rsa3072
     */
    Rsa3072 = 'RSA_3072',

    /**
     * ECDSA P-384 Signature
     * @description Elliptic Curve Digital Signature Algorithm with NIST P-384.
     * Properties:
     * - NIST standardized curve
     * - Higher security level than P-256
     * - Suitable for government use
     * - Balanced security/performance
     * @type {string}
     * @memberof _TypeEnum
     * @since 2.0.0
     * @example _TypeEnum.Ecdsa384
     */
    Ecdsa384 = 'ECDSA_384',

    /**
     * ECDSA secp256k1 Signature
     * @description Elliptic Curve Digital Signature Algorithm with Bitcoin's curve.
     * Properties:
     * - Bitcoin/Ethereum compatible
     * - Koblitz curve optimization
     * - Industry standard for blockchain
     * - Excellent performance
     * @type {string}
     * @memberof _TypeEnum
     * @since 2.0.0
     * @example _TypeEnum.EcdsaSecp256K1
     */
    EcdsaSecp256K1 = 'ECDSA_SECP256K1',

    /**
     * Unknown Signature Type
     * @description Fallback for unrecognized signature types.
     * Properties:
     * - Used for backward compatibility
     * - Indicates potential version mismatch
     * - Requires special handling
     * - Should be rare in practice
     * @type {string}
     * @memberof _TypeEnum
     * @since 2.0.0
     * @example _TypeEnum.Unknown
     */
    Unknown = 'UNKNOWN'
}